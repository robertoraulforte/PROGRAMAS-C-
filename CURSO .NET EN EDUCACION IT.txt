



CURSO .NET EN EDUCACION IT



¬°Bienvenidos al poderoso mundo de .NET! üñ•Ô∏èüöÄ
¬°Hola! ¬°Felicidades por embarcarte en este emocionante viaje hacia la maestr√≠a en desarrollo con .NET!  Dise√±amos este curso para llevarte desde los fundamentos hasta aplicaciones m√°s complejas utilizando las tecnolog√≠as m√°s avanzadas de .NET.  Juntos, exploraremos desde los conceptos b√°sicos hasta la integraci√≥n completa de aplicaciones web, paso a paso. Es normal que tengas preguntas a lo largo de este curso, ¬°pero no te preocupes! Estaremos avanzando gradualmente para que puedas comprender cada tema y aplicarlo con confianza.

Estructura del curso:

El curso se desarrollar√° en cinco m√≥dulos principales, cada uno dise√±ado para llevarte de un nivel b√°sico a un nivel m√°s avanzado en el desarrollo con .NET:

PORTADA CURSOS.png

M√≥dulo 1 - Introducci√≥n a .NET:

¬øQu√© es .NET?: Descubre el marco de trabajo .NET y su importancia en el desarrollo de aplicaciones modernas.
Instalaci√≥n de Visual Studio: Configura tu entorno de desarrollo con Visual Studio, la herramienta principal para trabajar con .NET.

C#: Aprende los fundamentos de C#, desde la sintaxis b√°sica hasta la creaci√≥n de programas simples.

Fundamentos de POO: Introducci√≥n a la Programaci√≥n Orientada a Objetos, un paradigma clave en el desarrollo con .NET.


M√≥dulo 2 - Desarrollo de Servicios y APIs RESTful:

¬øQu√© es una API?: Comprende el concepto de API y su rol fundamental en la integraci√≥n de sistemas.

.NET: APIs M√≠nimas: Aprende a crear APIs ligeras y r√°pidas con el enfoque de APIs m√≠nimas en .NET.

.NET: APIs Basadas en Controladores: Descubre c√≥mo estructurar y desarrollar APIs m√°s complejas utilizando controladores en .NET.


M√≥dulo 3 - Integraci√≥n con Bases de Datos y Almacenamiento:

Integraci√≥n con Bases de Datos y Almacenamiento: Explora las diversas opciones de almacenamiento y c√≥mo integrarlas en aplicaciones .NET.

Introducci√≥n a Entity Framework Core: Familiar√≠zate con los fundamentos de este ORM y c√≥mo simplifica el trabajo con bases de datos.

Configuraci√≥n y Conexi√≥n a Bases de Datos: Configura tu entorno y establece conexiones robustas con diferentes bases de datos.

Modelado de Datos y Migraciones: Aprende a modelar datos y a gestionar cambios en la estructura de tu base de datos mediante migraciones.

Consultas y LINQ: Descubre c√≥mo realizar consultas complejas y flexibles utilizando LINQ en Entity Framework Core.
Transacciones y Control de Concurrencia: Asegura la integridad de tus datos gestionando transacciones y controlando la concurrencia de manera efectiva.


M√≥dulo 4 - Autenticaci√≥n en ASP.NET Core:

Autenticaci√≥n en ASP.NET Core: Descubre c√≥mo configurar y gestionar la autenticaci√≥n en aplicaciones ASP.NET Core.

Conceptos B√°sicos de Seguridad en Web: Explora los principios fundamentales de la seguridad en aplicaciones web y su importancia.

Diferencias entre Autenticaci√≥n y Autorizaci√≥n: Entiende claramente la diferencia entre estos dos conceptos clave y c√≥mo se aplican en ASP.NET Core.

M√©todos Comunes de Autenticaci√≥n: Conoce los diferentes m√©todos de autenticaci√≥n utilizados en el desarrollo web moderno.
Token-Based Authentication: Aprende sobre la autenticaci√≥n basada en tokens, una t√©cnica ampliamente utilizada para gestionar sesiones de usuario.

Implementaci√≥n en ASP.NET Core: Pon en pr√°ctica los conocimientos adquiridos implementando sistemas de autenticaci√≥n en tus proyectos ASP.NET Core.


M√≥dulo 5 - Integraci√≥n de API con Front-end en Blazor:

¬øQu√© es Blazor?: Introducci√≥n a Blazor, una tecnolog√≠a que permite crear aplicaciones web con C# y .NET.
Caracter√≠sticas Clave: Descubre las principales caracter√≠sticas de Blazor que lo hacen una opci√≥n poderosa para el desarrollo web.

Historia y Evoluci√≥n: Aprende sobre la evoluci√≥n de Blazor y c√≥mo ha llegado a ser una herramienta clave en el desarrollo web moderno.

Blazor en .NET 8: Conoce las novedades y mejoras de Blazor en la versi√≥n m√°s reciente de .NET.

Tipos de Blazor: Explora los diferentes tipos de Blazor (Blazor Server y Blazor WebAssembly) y cu√°ndo usar cada uno.
Proyecto Final

Al final del curso, tendr√°s la oportunidad de aplicar lo que has aprendido en un Proyecto Final. Este proyecto no ser√° obligatorio, pero funcionar√° como una excelente forma de integrar todos los conocimientos adquiridos.

Si decides entregar el proyecto final, ser√° evaluado, y se tendr√° en cuenta para posibles recomendaciones en oportunidades laborales futuras.

 

¬°Estamos emocionados de acompa√±arte en este viaje de aprendizaje! Si√©ntete libre de participar, hacer preguntas y compartir tus ideas. ¬°Vamos a explorar el poder de .NET juntos! üéâüíª


****************


COMO PROGRAMAR EN VS CODE ?


https://code.visualstudio.com/



***************



C#


ÔÇö C# es un lenguaje de programaci√≥n moderno, innovador, de
c√≥digo abierto, multiplataforma orientado a objetos y uno de los 5
principales lenguajes de programaci√≥n de GitHub.


ÔÇö Scott Hanselman y David Fowler, conocido ingeniero de .NET,
nos ense√±an C# desde cero:


https://learn.microsoft.com/es-mx/shows/csharp-for-beginners/


 

*****************





Fundamentos de POO con C#  


ÔÇö Este paradigma facilita la creaci√≥n de software modular,
reutilizable y f√°cil de mantener.

ÔÇö Al estructurar el c√≥digo en objetos, los desarrolladores
pueden trabajar de manera m√°s intuitiva y cercana a la
forma en que perciben el mundo real, donde los objetos
interact√∫an entre s√≠.

ÔÇö Es ampliamente utilizada en la industria del software
debido a su capacidad para manejar sistemas complejos y
su compatibilidad con pr√°cticas de desarrollo √°giles.
ÔÇö Las caracter√≠sticas de la POO han sido implementadas en
muchos lenguajes de programaci√≥n populares, como Java,
C++, Python y C#

ÔÇö Esto ha contribuido a su adopci√≥n y popularidad en una
variedad de aplicaciones, desde el desarrollo de software
empresarial hasta los videojuegos y aplicaciones m√≥viles.

En esta serie de art√≠culos ver√°s:

‚Ä¢ La Programacion orientada a objetos (POO) y el
dise√±o orientado a objetos (DOO)
‚Ä¢ Los requerimientos: funcionales y no funcionales
‚Ä¢ Objetos y clases
‚Ä¢ Tipos de datos en C#: Por valor y por referencia
‚Ä¢ Constructores
‚Ä¢ Signaturas e Interfaces
‚Ä¢ Clases especiales: est√°ticas y abstractas
‚Ä¢ Modificadores de acceso
‚Ä¢ Los 4 Pilares de la POO: Herencia, abstracci√≥n,
encapsulamiento y polimorfismo
‚Ä¢ Los Principios SOLID


https://bravedeveloper.com/2022/06/27/fundamentos-de-la-poo-con-c-la-programacion-poo-y-el-diseno-orientado-a-objetos-ddo/




//////////////////////////////////




La Programaci√≥n Orientada a Objetos


Es un paradigma de programaci√≥n que hace uso de los llamados OBJETOS para modelar cosas del mundo real, sean animados o no, tangibles o intangibles.

Estos objetos se definen por medio de CLASES, las cuales son como plantillas o planos que permiten crear objetos, por lo tanto definen la informaci√≥n y la funcionalidad que los objetos poseer√°n.

Esto quiere decir que una clase permite crear muchos objetos los cuales comparten caracter√≠sticas en com√∫n.

La POO se aprovecha de la familiaridad que los seres humanos tenemos con los objetos del mundo real para poder modelar aplicaciones inform√°ticas de forma intuitiva y efectiva, y de esta forma dar soluci√≥n a problemas de la realidad mediante una soluci√≥n basada en software.

Este paradigma se vale de 4 pilares los cuales, como su nombre lo indica sostiene toda esta teor√≠a y t√©cnica. Estos 4 pilares son los siguientes:

Herencia: T√©cnica que permite compartir funcionalidades entre clases vali√©ndose de la reusabilidad del c√≥digo, haciendo de nuestro software un producto m√°s mantenible en el tiempo.

Abstracci√≥n: T√©cnica mediante la cual una clase capta las caracter√≠sticas y funcionalidades de un objeto y las presenta a trav√©s de campos y m√©todos hacia las dem√°s clases que las requieran, descartando toda informaci√≥n que no sea relevante.

Encapsulamiento: Consiste en ocultar el c√≥digo de los campos o m√©todos de una clase a las clases que est√©n requiriendo dicha informaci√≥n, permite a la clase funcionar a modo de caja negra.

Polimorfismo: Permite procesar objetos de forma diferenciada seg√∫n su clase.


Aqu√≠ he dado definiciones cortas y al grano, ya que estos pilares tendr√°n su propia entrada en esta serie.



Dise√±o Orientado a Objetos


Conjunto de principios de dise√±o de software que permiten utilizar los conceptos y herramientas de la Programaci√≥n orientada a objetos (POO) de manera tal que nuestro software sea hecho mediante buenas pr√°cticas resultando un producto correctamente programado, mantenible y sostenible en el tiempo.

Este dise√±o postula que modelemos como objetos los problemas y de esta forma tengamos nuestro software ordenado y organizado a modo de piezas de un rompecabezas que sean lo suficientemente peque√±as y definidas que sean √≥ptimas, manejables y f√°ciles de trabajar.

Este dise√±o orientado a objetos se basa en cinco principios conocidos por el acr√≥nimo SOLID, aqu√≠ una definici√≥n de cada uno de ellos. No ahondar√© en mucho detalle ya que ellos tendr√°n su propio art√≠culo:

Single Responsibility: El principio de responsabilidad √∫nica postula que un m√≥dulo debe tener una √∫nica responsabilidad, es decir un m√©todo de una clase debe tener una sola funci√≥n bien definida.

Open/Close: El principio abierto cerrado nos dice que un m√≥dulo debe ser flexible y estar abierto a la extensi√≥n mediante otro m√≥dulo y cerrado a la modificaci√≥n en el mismo m√≥dulo.

Liskov Substitution: Este principio nos indica que s√≥lo debemos heredar de una clase para a√±adir funcionalidades, nunca para modificar las existentes.

Interface Segregation: Nuestras interfaces deben ser cohesivas, es decir deben tener s√≥lo los miembros necesarios para su funci√≥n y responsabilidad.

Dependency Inversion: Nuestros m√≥dulos deben tener bajo acoplamiento, es decir un m√≥dulo de alto nivel no debe depender de uno de bajo nivel, sino que ambos deben depender de abstracciones.



En conclusi√≥n


Mientras que la POO nos da las herramientas para modelar nuestro software de forma intuitiva, el DOO nos dice c√≥mo hacerlo bien mediante buenas pr√°cticas de software.




*****************************




Bienvenidos al M√≥dulo 2: Desarrollo de APIs en .NET! üåêüîó


En este m√≥dulo, nos adentraremos en el emocionante mundo de las APIs, una pieza clave en el desarrollo de aplicaciones modernas que permite la comunicaci√≥n entre diferentes sistemas y servicios. Exploraremos qu√© es una API, su importancia, y c√≥mo construir APIs en .NET utilizando dos enfoques diferentes: APIs m√≠nimas y APIs basadas en controladores. Este m√≥dulo te brindar√° las herramientas necesarias para crear servicios backend eficientes y escalables.

Temario

¬øQu√© es una API?: Comprende el concepto de API y su rol fundamental en la integraci√≥n de sistemas.

.NET: APIs M√≠nimas: Aprende a crear APIs ligeras y r√°pidas con el enfoque de APIs m√≠nimas en .NET.

.NET: APIs Basadas en Controladores: Descubre c√≥mo estructurar y desarrollar APIs m√°s complejas utilizando controladores en .NET.

Materiales AquiDownload Aqui
Este m√≥dulo te permitir√° dominar la creaci√≥n de APIs en .NET, una habilidad esencial para cualquier desarrollador moderno. ¬°Prep√°rate para conectar y expandir tus aplicaciones! üöÄ




¬øQu√© es una API?


Una API (Interfaz de Programaci√≥n de Aplicaciones) es un conjunto de reglas y
protocolos que permite a diferentes aplicaciones y servicios comunicarse entre s√≠.
 Las API definen c√≥mo se deben hacer las solicitudes y respuestas entre sistemas, facilitando la
interacci√≥n entre software desarrollado de forma independiente.



A vuelo de p√°jaro

Las API son esenciales para integrar diferentes servicios, como cuando una app de viaje utiliza
una API de mapas para mostrar rutas o una tienda en l√≠nea utiliza una API de pago para
procesar transacciones.



Net: APIs m√≠nimas

Microsoft learn: Creaci√≥n de una API m√≠nima.

https://learn.microsoft.com/es-es/training/paths/aspnet-core-minimal-api/


La API m√≠nima est√° dise√±ada para simplificar el proceso de configuraci√≥n y desarrollo de
aplicaciones. Utiliza una sintaxis concisa y directa, ideal para aplicaciones
peque√±as o microservicios.



.Net: APIs basadas en controladores


Microsoft learn: Creaci√≥n de una API web con controladores de ASP.NET Core

https://learn.microsoft.com/es-es/training/modules/build-web-api-aspnet-core/


La API basada en controladores implica la creaci√≥n de clases de controladores que
agrupan rutas y solicitudes relacionadas con un aspecto espec√≠fico de la aplicaci√≥n, y contienen
varios m√©todos de acci√≥n. Este enfoque estructurado es m√°s adecuado para aplicaciones grandes y
complejas.





LINK CREACION DE UNA API MINIMA :

https://learn.microsoft.com/es-es/aspnet/core/tutorials/min-web-api?view=aspnetcore-8.0&tabs=visual-studio


LINK

Creaci√≥n de una API web con controladores de ASP.NET Core :


https://learn.microsoft.com/es-es/training/modules/build-web-api-aspnet-core/





//////////////////




¬°Bienvenidos al M√≥dulo 3: Integraci√≥n con Bases de Datos en .NET! üóÑÔ∏èüíæ



En este m√≥dulo, nos sumergiremos en la integraci√≥n de aplicaciones .NET con bases de datos, un componente esencial para la gesti√≥n y almacenamiento de informaci√≥n. Aprender√°s a utilizar Entity Framework Core, el ORM de .NET, para interactuar con bases de datos de manera eficiente. Desde la configuraci√≥n inicial hasta el manejo de transacciones y control de concurrencia, este m√≥dulo te equipar√° con las habilidades necesarias para gestionar datos de manera segura y efectiva en tus aplicaciones.

Temario

Integraci√≥n con Bases de Datos y Almacenamiento: Explora las diversas opciones de almacenamiento y c√≥mo integrarlas en aplicaciones .NET.

Introducci√≥n a Entity Framework Core: Familiar√≠zate con los fundamentos de este ORM y c√≥mo simplifica el trabajo con bases de datos.

Configuraci√≥n y Conexi√≥n a Bases de Datos: Configura tu entorno y establece conexiones robustas con diferentes bases de datos.

Modelado de Datos y Migraciones: Aprende a modelar datos y a gestionar cambios en la estructura de tu base de datos mediante migraciones.

Consultas y LINQ: Descubre c√≥mo realizar consultas complejas y flexibles utilizando LINQ en Entity Framework Core.

Transacciones y Control de Concurrencia: Asegura la integridad de tus datos gestionando transacciones y controlando la concurrencia de manera efectiva.

 

Este m√≥dulo es clave para construir aplicaciones robustas y escalables que gestionen datos de manera confiable. ¬°Prep√°rate para dominar la interacci√≥n con bases de datos en .NET! üöÄ




INTRODUCCI√ìN A ENTITY FRAMEWORK CORE


Entity Framework (EF) Core es una versi√≥n ligera,
extensible, de c√≥digo abierto y multiplataforma de la
popular tecnolog√≠a de acceso a datos Entity
Framework.

Un ORM (Object Relational Mapper) es una t√©cnica
que crea un "puente" entre programas orientados a
objetos y, en la mayor√≠a de los casos, bases de datos
relacionales. B√°sicamente, un ORM permite
interactuar con bases de datos utilizando objetos en tu
lenguaje de programaci√≥n preferido, los ORMs
simplifican la interacci√≥n con bases de datos al traducir
instrucciones de programaci√≥n a sentencias SQL
comprensibles para el gestor de base de datos.

‚Ä¢ Object Relational Mapper: EF Core permite a los
desarrolladores de .NET trabajar con una base de
datos usando objetos .NET. Esto significa que
puedes manipular datos como si fueran objetos en
lugar de escribir c√≥digo de acceso a datos
manualmente.

‚Ä¢ Modelo de datos: En EF Core, el acceso a datos se
realiza mediante un modelo. Un modelo se
compone de clases de entidad y un objeto de
contexto que representa una sesi√≥n con la base de
datos. Este objeto de contexto permite consultar y
guardar datos.

‚Ä¢ Consultas: Las instancias de las clases de entidad se
recuperan de la base de datos mediante Language
Integrated Query (LINQ).



CONFIGURACI√ìN Y CONEXI√ìN A BASES DE DATOS

EF Core es compatible con varios proveedores de bases de datos, algunos de ellos:

‚Ä¢ Microsoft SQL Server: Compatible con SQL Server y
Azure SQL Database, por medio de
Microsoft.EntityFrameworkCore.SqlServer.

‚Ä¢ SQLite: Admite versiones 3.7 en adelante utilizando
Microsoft.EntityFrameworkCore.Sqlite.

‚Ä¢ MySQL: A trav√©s del proveedor
Pomelo.EntityFrameworkCore.MySql.

‚Ä¢ PostgreSQL: Utiliza el proveedor
Npgsql.EntityFrameworkCore.PostgreSQL.

‚Ä¢ In-memory database: Para pruebas y desarrollo,
mediante el proveedor Microsoft.EntityFrameworkCore.InMemory.



CONFIGURACI√ìN Y CONEXI√ìN A BASES DE DATOS

Ejemplos de conexiones:

Microsoft SQL Server

.UseSqlServer(‚ÄúServer=localhost,1433;Initial
Catalog=baseDeDatos;User
ID=usuario;Password=contrase√±a‚Äù);

MySQL

.UseMySql(‚Äúserver=localhost;user=usuario;passwor
d=contrase√±a;database=baseDeDatos‚Äù,
serverVersion)



MODELADO DE DATOS Y MIGRACIONES

‚Ä¢ En EF Core, el acceso a datos se realiza mediante un modelo. Este modelo se compone de clases de entidad y un objeto de contexto que representa una 
sesi√≥n con la base de datos.

‚Ä¢ Las clases de entidad son representaciones de las tablas en la base de datos. Por ejemplo, si tienes una tabla "Blogs", crear√≠as una clase de entidad llamada Blog.

‚Ä¢ Cada propiedad en la clase de entidad corresponde a una columna en la tabla. 
Por ejemplo:

public class Blog
{
public int BlogId { get; set; }
public string Url { get; set; }
}



MODELADO DE DATOS Y MIGRACIONES


‚Ä¢ Puedes configurar el modelo utilizando Fluent API o Data Annotations.

‚Ä¢ Fluent API te permite especificar la configuraci√≥n sin modificar las clases de entidad. 

Por ejemplo:
protected override void OnModelCreating(ModelBuilder modelBuilder)

{
modelBuilder.Entity<Blog>()
.Property(b => b.Url)
.IsRequired();
}



MODELADO DE DATOS Y MIGRACIONES

Las migraciones en EF Core son una herramienta esencial para mantener sincronizado el esquema de la base
de datos con el modelo de datos de tu aplicaci√≥n.

1. ¬øQu√© son las migraciones?
‚Ä¢ Las migraciones permiten actualizar el esquema de la base de datos de manera incremental.
‚Ä¢ Cuando cambias el modelo de datos (agregas o quitas entidades o propiedades), creas una migraci√≥n que
describe las actualizaciones necesarias.

2. Pasos clave en las migraciones:
‚Ä¢ Generaci√≥n: EF Core compara el modelo actual con una instant√°nea anterior y genera archivos de origen para la
migraci√≥n.
‚Ä¢ Aplicaci√≥n: Puedes aplicar las migraciones a la base de datos.
‚Ä¢ Historial: EF Core registra las migraciones aplicadas en una tabla especial.



CONSULTAS Y LINQ

Las consultas en EF Core se usan para recuperar datos de la base de datos.

1. LINQ y Consultas:
‚Ä¢ EF Core utiliza Language Integrated Query (LINQ) para escribir consultas en C# o el lenguaje .NET
preferido.
‚Ä¢ Puedes consultar datos basados en el contexto y las clases de entidad.

2. Proceso de Consulta:
‚Ä¢ Creas una representaci√≥n de la consulta en memoria al usar operadores LINQ.
‚Ä¢ La consulta se env√≠a a la base de datos solo cuando se usan los resultados.
‚Ä¢ Operaciones comunes que env√≠an la consulta a la base de datos incluyen iterar resultados, usar ToList,
ToArray, Single, Count y equivalentes asincr√≥nicos.



CONSULTAS Y LINQ

Ejemplo de consulta de lectura:

using (var context = new BloggingContext())
{
var blogs = context.Blogs.ToList();
foreach (var blog in blogs)
{
Console.WriteLine($"Blog: {blog.Url}");
}
}


CONSULTAS Y LINQ

Ejemplo de consulta de escritura:

using (var context = new BloggingContext())
{
var newBlog = new Blog
{
Url = "https://mynewblog.com"
};
context.Blogs.Add(newBlog);
context.SaveChanges();
}



TRANSACCIONES Y CONTROL DE CONCURRENCIA

Las transacciones en EF Core sirven para procesar varias operaciones de base de datos de manera
at√≥mica.

1. Comportamiento predeterminado de las transacciones:

‚Ä¢ Cuando realizas cambios en la base de datos mediante SaveChanges, EF Core los aplica en una
transacci√≥n.
‚Ä¢ Si alg√∫n cambio falla, la transacci√≥n se revierte y ninguno de los cambios se aplica a la base de datos.
‚Ä¢ Esto garantiza que SaveChanges se complete correctamente o deje la base de datos sin modificaciones en
caso de error.



TRANSACCIONES Y CONTROL DE CONCURRENCIA

2. Control manual de transacciones:

‚Ä¢ Puedes usar la API DbContext.Database para iniciar, confirmar y revertir transacciones.
‚Ä¢ Ejemplo de uso:
using var context = new BloggingContext();
using var transaction = context.Database.BeginTransaction();
try
{
// Realizar cambios en la base de datos
context.Blogs.Add(new Blog { Url = "https://mynewblog.com" });
context.SaveChanges();
// Otros cambios...
transaction.Commit(); // Confirmar transacci√≥n
}
catch (Exception)
{
// Manejar errores
}


TRANSACCIONES Y CONTROL DE CONCURRENCIA

El control de concurrencia en EF Core garantiza la coherencia de los datos cuando varias instancias de
aplicaciones modifican la base de datos simult√°neamente.
1. Simultaneidad optimista:
‚Ä¢ EF Core implementa la simultaneidad optimista, que asume que los conflictos de simultaneidad son poco frecuentes.
‚Ä¢ A diferencia de los enfoques pesimistas que bloquean datos por adelantado, la simultaneidad optimista no bloquea,
sino que verifica si los datos han cambiado desde que se consultaron.
‚Ä¢ Si los datos han cambiado, se notifica a la aplicaci√≥n para manejarlo (por ejemplo, reintento de operaci√≥n).
2. Token de simultaneidad:
‚Ä¢ Configuras una propiedad como un token de simultaneidad en EF Core.
‚Ä¢ Este token se carga y se rastrea al consultar una entidad.
‚Ä¢ Al actualizar o eliminar datos con SaveChanges(), se compara el valor del token en la base de datos con el valor original
le√≠do por EF Core.



MATERIAL DE ESTUDIO

‚Ä¢ V√≠deos tutoriales:


‚Ä¢ Curso completo de Entity Framework Core ‚Äì YouTube

https://www.youtube.com/playlist?list=PLesmOrW3mp4i2RdfsPI5R6o5EVacGuovz

‚Ä¢ Aprende Entity Framework | Entity Framework Core para Principiantes | cu√°ndo y c√≥mo usarlo (youtube.com)

https://www.youtube.com/watch?v=jpshj-LiRig


‚Ä¢ CODE FIRST con Entity Framework en .NET (youtube.com)

https://www.youtube.com/watch?v=x1zjZUZJ6UA



‚Ä¢ Documentaci√≥n y cursos oficiales:


‚Ä¢ Informaci√≥n general de Entity Framework Core - EF Core | Microsoft Learn

https://learn.microsoft.com/es-es/ef/core/


‚Ä¢ Entity Framework Core para principiantes | Microsoft Learn

https://learn.microsoft.com/es-es/shows/entity-framework-core-for-beginners/

